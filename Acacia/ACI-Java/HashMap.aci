// Acacia implementation of a simple hash map.
// Do 'open "HashMap"' if you'd like to use this object in your code.

def getHash(obj) {
    let hash = 0;
    let str = convert(obj, "string");
    foreach (let c; str;) {
        hash = hash + c.charCode();
    }
    return hash % 1028;
}

class MapBucket {
    init(key, value) {
        this.key = key;
        this.value = value;
    }
}

class HashMap {
    init() {
        this.contents = [];
        for (let i = 0; i < 1028; i++) {
            this.contents.push(nil);
        }
    }

    set(key, value) {
        assert(key != nil, "HashMap keys cannot be nil");

        let k = getHash(key);
        if ((this.contents)[k] == nil) {
            this.contents.replace(k, [MapBucket(key, value)]);
        }
        else {
            this.contents.get(k).push(MapBucket(key, value));
        }
    }

    get(key) {
        if (key == nil) return nil;

        let k = getHash(key);
        let buckets = this.contents.get(k);

        if (buckets == nil) return nil;
        if (len(buckets) == 1) return buckets[0].value;
        else {
            for (let i = 0; i < len(buckets); i++) {
                if (buckets[i].key == key) return buckets[i].value;
            }
        }
    }


}